variables:
  conda.deps: >
    python=$(python.version)
    pandas scipy fastparquet python-snappy numba cffi pyarrow
    invoke coverage pytest pytest-cov pytest-doctestplus cython
  pip.deps: >
    invoke pytest coverage pytest-cov pytest-doctestplus
    pandas scipy pyarrow numpy
    numba cython cffi
  pip.extras: >
    hpfrec implicit

jobs:

- job: 'LinuxConda'
  pool:
    vmImage: ubuntu-16.04
  strategy:
    matrix:
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
    maxParallel: 4

  steps:
  - task: CondaEnvironment@1
    inputs:
      createCustomEnvironment: true
      environmentName: lkpy
      packageSpecs: $(conda.deps)
  
  - script: |
        pip install $(pip.extras)
    displayName: 'Extra PyPI deps'

  - script: |
      numba -s
    displayName: 'Inspect Numba environment'
    
  - script: |
      if [ ! -r ml-100k/u.data ]; then
        wget --no-verbose -O ml-100k.zip http://files.grouplens.org/datasets/movielens/ml-100k.zip
        unzip ml-100k.zip
      fi
    displayName: 'Download ML-100K'

  - script: |
      mkdir -p build
      python3 setup.py build
    displayName: 'Build LKPY'

  - script: |
      export NUMBA_THREADING_LAYER=omp # Tests don't work with TBB
      python3 -m pytest --junitxml=build/test-results.xml --verbose
    displayName: 'Test LKPY'

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: 'build/test-results.xml'
      testRunTitle: 'Publish test results for Python $(python.version)'

  - script: |
      env NUMBA_DISABLE_JIT=1 python3 -m pytest --cov=lenskit --cov-report=xml --cov-report=html -m 'not eval'
    displayName: 'Run Tests with Coverage'

  - script: |
      echo "Fetching Codecov script"
      curl -o /tmp/codecov.sh https://codecov.io/bash
      
      echo "Building for $BUILD_REASON"
      cc_args=
      if [ -n "$SYSTEM_PULLREQUEST_PULLREQUESTNUMBER" ]; then
        ccargs="-P $SYSTEM_PULLREQUEST_PULLREQUESTNUMBER"
      fi
      if [ -z "$CODECOV_TOKEN" ]; then
        echo "no CODECOV_TOKEN :(" >&2
      fi

      bash /tmp/codecov.sh -C "$BUILD_SOURCEVERSION" -B $BUILD_SOURCEBRANCH $cc_args
    displayName: 'Update CodeCov'

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage.xml'
      reportDirectory: '$(System.DefaultWorkingDirectory)/htmlcov'

- job: 'LinuxVanilla'
  pool:
    vmImage: ubuntu-16.04
  strategy:
    matrix:
      Python35:
        python.version: '3.5'
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
    maxParallel: 4

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: |
      echo git hash $GIT_COMMIT_SHA
      echo git branch $GIT_BRANCH
      echo Python $(python.version)
    displayName: 'Inspect environment'

  - script: |
      python -m pip install --upgrade pip
      pip install $(pip.deps)
    displayName: 'Install dependencies'
  
  - script: |
      if [ ! -r ~/ml-100k/u.data ]; then
        wget --no-verbose -O ml-100k.zip http://files.grouplens.org/datasets/movielens/ml-100k.zip
        unzip -d ~ ml-100k.zip
      fi
    displayName: 'Download ML-100K'
    
  - script: |
      mkdir -p build
      python3 -m pytest --junitxml=build/test-results.xml
    displayName: 'pytest'

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: 'build/test-results.xml'
      testRunTitle: 'Publish test results for Python $(python.version)'
  
  - script: |
      env NUMBA_DISABLE_JIT=1 invoke test --cover --no-eval
    displayName: 'Test Coverage'

  - script: |
      coverage xml
      echo "Fetching Codecov script"
      curl -o /tmp/codecov.sh https://codecov.io/bash
      
      echo "Building for $BUILD_REASON"
      cc_args=
      if [ -n "$SYSTEM_PULLREQUEST_PULLREQUESTNUMBER" ]; then
        ccargs="-P $SYSTEM_PULLREQUEST_PULLREQUESTNUMBER"
      fi
      if [ -z "$CODECOV_TOKEN" ]; then
        echo "no CODECOV_TOKEN :(" >&2
      fi

      bash /tmp/codecov.sh -C "$BUILD_SOURCEVERSION" -B $BUILD_SOURCEBRANCH $cc_args
    displayName: 'Upload Coverage'

- job: 'LinuxSketchyDeps'
  pool:
    vmImage: ubuntu-16.04

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.6'
      architecture: 'x64'

  - script: |
      python -m pip install --upgrade pip
      pip install $(pip.deps)
    displayName: 'Install dependencies'
  
  - script: |
      python -m pip install cffi
    displayName: 'Install partial extra deps'
    
  - script: |
      mkdir -p build
      python3 -m pytest --junitxml=build/test-results.xml
    displayName: 'pytest'

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: 'build/test-results.xml'
      testRunTitle: 'Publish test results for Python $(python.version)'
  
  - script: |
      env NUMBA_DISABLE_JIT=1 invoke test --cover --no-eval
    displayName: 'Test Coverage'

  - script: |
      coverage xml
      echo "Fetching Codecov script"
      curl -o /tmp/codecov.sh https://codecov.io/bash
      
      echo "Building for $BUILD_REASON"
      cc_args=
      if [ -n "$SYSTEM_PULLREQUEST_PULLREQUESTNUMBER" ]; then
        ccargs="-P $SYSTEM_PULLREQUEST_PULLREQUESTNUMBER"
      fi
      if [ -z "$CODECOV_TOKEN" ]; then
        echo "no CODECOV_TOKEN :(" >&2
      fi

      bash /tmp/codecov.sh -C "$BUILD_SOURCEVERSION" -B $BUILD_SOURCEBRANCH $cc_args
    displayName: 'Upload Coverage'

- job: 'WindowsVanilla'
  pool:
    vmImage: vs2017-win2016
  strategy:
    matrix:
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
    maxParallel: 4

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: |
      python -m pip install --upgrade pip
      pip install $(pip.deps)
    displayName: 'Install dependencies'

  - script: |
      python -m pytest --junitxml=build/test-results.xml --log-file=build/test.log --log-file-level=DEBUG
    displayName: 'Test LKPY'
  
  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: 'build/test-results.xml'
      testRunTitle: 'Publish test results for Windows Python $(python.version)'

  - task: PublishBuildArtifacts@1
    condition: succeededOrFailed()
    inputs:
      pathtoPublish: build/test.log
      artifactName: Test log $(python.version)

- job: 'WindowsConda'
  pool:
    vmImage: vs2017-win2016
  strategy:
    matrix:
      Python36:
        python.version: '3.6'
      # Python37:
      #   python.version: '3.7'
    maxParallel: 4

  steps:
  - task: CondaEnvironment@1
    inputs:
      createCustomEnvironment: true
      environmentName: lkpy
      packageSpecs: $(conda.deps)

  - script: |
      pip install $(pip.extras)
    displayName: 'Extra PyPI deps'

  - script: |
      python -V
      python setup.py build
    displayName: 'Build LKPY'

  - script: |
      python -m pytest --junitxml=build/test-results.xml
    displayName: 'Test LKPY'
  
  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: 'build/test-results.xml'
      testRunTitle: 'Publish test results for Windows Python $(python.version)'

- job: 'MacConda'
  pool:
    vmImage: 'macOS-10.13'
  strategy:
    matrix:
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
    maxParallel: 4

  steps:
  - task: CondaEnvironment@1
    inputs:
      createCustomEnvironment: true
      environmentName: lkpy
      packageSpecs: $(conda.deps)
      updateConda: false

  - script: sudo conda install -y llvm-openmp
    displayName: 'Install OpenMP'

  - script: |
      if [ ! -r ~/ml-100k/u.data ]; then
        wget --no-verbose -O ml-100k.zip http://files.grouplens.org/datasets/movielens/ml-100k.zip
        unzip -d ~ ml-100k.zip
      fi
    displayName: 'Download ML-100K'
    
  - script: |
      python3 setup.py build
    displayName: 'Build LKPY'

  - script: |
      mkdir -p build
      python3 -m pytest --junitxml=build/test-results.xml
    displayName: 'Test LKPY'

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: 'build/test-results.xml'
      testRunTitle: 'Publish test results for Mac Python $(python.version)'
