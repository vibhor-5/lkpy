[build-system]
requires = ["setuptools>=64", "setuptools_scm>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "lenskit"
description = "Toolkit for recommender systems research, teaching, and more."
authors = [
  { name = "Michael Ekstrand", email = "mdekstrand@drexel.edu" },
]
classifiers = [
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Operating System :: OS Independent",
  "Intended Audience :: Science/Research",
]
requires-python = ">= 3.10"
readme = "README.md"
license = { file = "LICENSE.md" }
dynamic = ["version"]
dependencies = [
  "pandas >=1.5, <3",
  "numpy >= 1.23",
  "scipy >= 1.9.0",
  "numba >= 0.56, < 0.59",
  "torch ~=2.1",            # conda: pytorch>=2.1,<3
  "threadpoolctl >=3.0",
  "binpickle >= 0.3.2",
  "seedbank >= 0.2.0a2",    # conda: @pip
  "progress-api >=0.1.0a9", # conda: @pip
  "manylog >=0.1.0a5",      # conda: @pip
  "csr >= 0.5",
]

[project.optional-dependencies]
sklearn = ["scikit-learn >= 1.1"]

[project.urls]
homepage = "https://lenskit.org"
documentation = "https://lkpy.lenskit.org"
source = "https://github.com/lenskit/lkpy"

# configure build tools
[tool.setuptools.packages.find]
include = ["lenskit*"]

[tool.setuptools_scm]
version_scheme = "release-branch-semver"

# settings for generating conda environments for dev & CI, when needed
[tool.pyproject2conda]
channels = ["pytorch", "conda-forge", "nodefaults"]
python = ["3.10", "3.11"]
default_envs = ["test", "doc"]
template_python = "envs/lenskit-py{py_version}-{env}"
template = "envs/{env}"
deps = ["tbb", "just"]

[tool.pyproject2conda.envs.dev]
extras = ["dev", "test", "doc", "demo", "sklearn"]
deps = ["just==1.*", "tbb"]

[tool.pyproject2conda.envs.ci]
extras = ["test", "sklearn", "dev"]
deps = ["just==1.*", "tbb"]

[tool.coverage.run]
relative_files = true

[tool.ruff]
line-length = 100
target-version = "py310"
exclude = [
  ".git",
  "__pycache__",
  "build",
  "dist",
]

[tool.ruff.lint]
select = ["E", "F", "I"]

[tool.ruff.lint.isort]
section-order = [
  "future",
  "standard-library",
  "third-party",
  "testing",
  "first-party",
  "local-folder",
]

[tool.ruff.lint.isort.sections]
testing = ["pytest", "hypothesis"]

[tool.mypy]
exclude = "^docs/"

[tool.pyright]
typeCheckingMode = "basic"
exclude = [
  "docs/*",
]
reportMissingImports = true
reportMissingTypeStubs = false

[tool.pytest.ini_options]
log_level = "INFO"
log_format = "[%(levelname)7s] [%(processName)s] %(name)s %(message)s"
log_cli_format = "[%(levelname)7s] %(asctime)s [%(processName)s] %(name)s %(message)s"
log_file_format = "[%(levelname)7s] %(asctime)s [%(processName)s] %(name)s %(message)s"
log_file_level = "DEBUG"
addopts = "--benchmark-skip"
testpaths = [
  "tests",
  "lenskit",
  "docs",
]
doctest_plus = true
doctest_subpackage_requires = [
  "lenskit/algorithms/svd* = scikit-learn",
]
filterwarnings = [
  "ignore:::pyarrow[.*]",
  "ignore:.*matrix subclass.*:PendingDeprecationWarning",
  "ignore:.*np.asscalar.*:DeprecationWarning",
  "ignore:.*deprecated create function*:DeprecationWarning",
  "ignore:.*importing the ABCs*:DeprecationWarning",
  "ignore:.*use_ratings option.*:UserWarning",
  "ignore:.*tensor support is in beta state.*:UserWarning",
]
markers = [
  "eval: mark the test as running the evaluator over custom data",
  "slow: mark the test as taking a larger-than-usual amount of time",
  "realdata: mark the test as using a real data set like ML-20M",
]
